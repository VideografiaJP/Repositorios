using Newtonsoft.Json.Linq;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace JovemPan.Socket
{
    public class Dados
    {
        private string mosId = "VMIX.MOS";
        private string ncsID = "SRV-013-ENPS01";

        //public int idEmpresa = 2;

        private readonly string cnPG;
        //NpgsqlConnection conn;
        public Dados()
        {
            cnPG = "Host=172.16.1.216;Username=videografia;Password=Jovemp@n;Search Path=Crawl;Database=VideografiaApps;";
            //cnPG = "Host=127.0.0.1;Username=postgres;Password=postgres;Search Path=Crawl;Database=local;";
            //conn = new NpgsqlConnection(cnPG);
            //conn.Open();
        }

        public async Task AddLogAsync(Models.Log item)
        {
            // Sempre usar await using para garantir que a conexão seja fechada
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            // Use parâmetros nomeados (mais claro e evita confusão com ordem)
            const string sql = @"INSERT INTO ""MOS"".""Logs"" (""Message"") VALUES (@message)";

            await using var cmd = new NpgsqlCommand(sql, conn);
            cmd.Parameters.AddWithValue("message", item.Message ?? (object)DBNull.Value);

            await cmd.ExecuteNonQueryAsync();
        }

        public async Task CleanLog()
        {
            // Sempre usar await using para garantir que a conexão seja fechada
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            // Use parâmetros nomeados (mais claro e evita confusão com ordem)
            const string sql = @"DELETE FROM ""MOS"".""Logs"" WHERE ""createdAt"" < NOW() - INTERVAL '12 hours'";

            await using var cmd = new NpgsqlCommand(sql, conn);
            //cmd.Parameters.AddWithValue("message", item.Message ?? (object)DBNull.Value);

            await cmd.ExecuteNonQueryAsync();
        }

        public async Task<string?> AddRoCreate(XElement item, int idEmpresa)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                const string sql = @"
        WITH new_rundown AS (
            INSERT INTO ""MOS"".""Rundowns"" (""Programa"", ""Identificador"", ""mosID"", ""ncsID"", ""Titulo"") 
            VALUES (@Programa, @Identificador, @mosID, @ncsID, @Titulo) 
            ON CONFLICT (""Identificador"") DO NOTHING
            RETURNING *
        )
        SELECT json_build_object(
            'rundown', row_to_json(nr),
            'stories', (
                SELECT json_agg(s)
                FROM ""MOS"".""Stories"" s
                WHERE s.""RundownId"" = nr.""Id""
            )
        )
        FROM new_rundown nr;
        ";

                await using var cmd = new NpgsqlCommand(sql, conn, transaction);
                cmd.Parameters.AddWithValue("Programa", idEmpresa);
                cmd.Parameters.AddWithValue("Identificador", item.Element("roID")?.Value ?? (object)DBNull.Value);
                cmd.Parameters.AddWithValue("mosID", mosId);
                cmd.Parameters.AddWithValue("ncsID", ncsID);
                cmd.Parameters.AddWithValue("Titulo", item.Element("roSlug")?.Value ?? (object)DBNull.Value);

                // executa e pega JSON retornado
                var jsonResult = (string?)await cmd.ExecuteScalarAsync();

                // Agora você insere as stories
                if (!string.IsNullOrEmpty(jsonResult))
                {
                    var rundownId = JObject.Parse(jsonResult)["rundown"]?["Id"]?.Value<int>() ?? 0;

                    const string insertStorySql = @"INSERT INTO ""MOS"".""Stories"" 
                (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
                VALUES (@RundownId, @roId, @Identificador, @Titulo, @Ordem);";

                    await using var insertStoryCmd = new NpgsqlCommand(insertStorySql, conn, transaction);
                    insertStoryCmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Integer);
                    insertStoryCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("Titulo", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

                    int order = 0;
                    foreach (var s in item.Elements("story"))
                    {
                        insertStoryCmd.Parameters["RundownId"].Value = rundownId;
                        insertStoryCmd.Parameters["roId"].Value = s.Element("storyID")?.Value ?? (object)DBNull.Value;
                        insertStoryCmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
                        insertStoryCmd.Parameters["Titulo"].Value = s.Element("storySlug")?.Value ?? (object)DBNull.Value;
                        insertStoryCmd.Parameters["Ordem"].Value = order++;

                        await insertStoryCmd.ExecuteNonQueryAsync();
                        }
                    
                    //reconsulta rundown + stories atualizados
                    const string selectFinalJson = @"
                    SELECT json_build_object(
                        'rundown', row_to_json(r),
                        'stories', (
                            SELECT json_agg(s ORDER BY s.""Ordem"")
                            FROM ""MOS"".""Stories"" s
                            WHERE s.""RundownId"" = r.""Id""
                        )
                    )
                    FROM ""MOS"".""Rundowns"" r
                    WHERE r.""Id"" = @RundownId;
                    ";

                    await using var selectCmd = new NpgsqlCommand(selectFinalJson, conn, transaction);
                    selectCmd.Parameters.AddWithValue("RundownId", rundownId);

                    var finalJson = (string?)await selectCmd.ExecuteScalarAsync();

                    await transaction.CommitAsync();

                    return finalJson;
                }

                await transaction.CommitAsync();
                return null;
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task AddRoCreate_(XElement item)
        {
            //await using var conn = new NpgsqlConnection(cnPG);
            //await conn.OpenAsync();

            //await using var transaction = await conn.BeginTransactionAsync();

            //try
            //{
            //    const string insertRundownSql = @"INSERT INTO ""MOS"".""Rundowns"" (""Programa"", ""Identificador"", ""mosID"", ""ncsID"", ""Titulo"") 
            //    VALUES (@Programa, @Identificador, @mosID, @ncsID, @Titulo) ON CONFLICT (""Identificador"") DO NOTHING RETURNING ""Id"";";

            //    await using var insertRundownCmd = new NpgsqlCommand(insertRundownSql, conn, transaction);
            //    insertRundownCmd.Parameters.AddWithValue("Programa", idEmpresa);
            //    insertRundownCmd.Parameters.AddWithValue("Identificador", item.Element("roID")?.Value ?? (object)DBNull.Value);
            //    insertRundownCmd.Parameters.AddWithValue("mosID", mosId);
            //    insertRundownCmd.Parameters.AddWithValue("ncsID", ncsID);
            //    insertRundownCmd.Parameters.AddWithValue("Titulo", item.Element("roSlug")?.Value ?? (object)DBNull.Value);

            //    var rundownIdObj = await insertRundownCmd.ExecuteScalarAsync();
            //    if (rundownIdObj == null)
            //    {
            //        return;
            //    }

            //    var rundownId = (int)rundownIdObj;

            //    const string insertStorySql = @"INSERT INTO ""MOS"".""Stories"" (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
            //    VALUES (@RundownId, @roId, @Identificador, @Titulo, @Ordem);";

            //    await using var insertStoryCmd = new NpgsqlCommand(insertStorySql, conn, transaction);
            //    insertStoryCmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Integer);
            //    insertStoryCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
            //    insertStoryCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
            //    insertStoryCmd.Parameters.Add("Titulo", NpgsqlTypes.NpgsqlDbType.Text);
            //    insertStoryCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

            //    int order = 1;
            //    foreach (var s in item.Elements("story"))
            //    {
            //        insertStoryCmd.Parameters["RundownId"].Value = rundownId;
            //        insertStoryCmd.Parameters["roId"].Value = s.Element("storyID")?.Value ?? (object)DBNull.Value;
            //        insertStoryCmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
            //        insertStoryCmd.Parameters["Titulo"].Value = s.Element("storySlug")?.Value ?? (object)DBNull.Value;
            //        insertStoryCmd.Parameters["Ordem"].Value = order++;

            //        await insertStoryCmd.ExecuteNonQueryAsync();
            //    }

            //    await transaction.CommitAsync();
            //}
            //catch
            //{
            //    // Se der erro, desfaz tudo
            //    await transaction.RollbackAsync();
            //    throw;
            //}
        }

        public async Task<string?> AddRoStorySend(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("storyID")?.Value ?? "";
                var storySlug = item.Element("storySlug")?.Value ?? "";
                var conteudoCompleto = item.Element("storyBody")?.Value ?? "";

                // Se não existir, insere a story "vazia"
                if (string.IsNullOrEmpty(conteudoCompleto))
                {
                    const string insertStorySql = @"
                        INSERT INTO ""MOS"".""Stories"" 
                            (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
                        VALUES (
                            (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1),
                            @roId, @Identificador, @Titulo,
                            COALESCE((SELECT MAX(""Ordem"")+1 FROM ""MOS"".""Stories"" 
                                      WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" 
                                                             WHERE ""Identificador"" = @RundownId LIMIT 1)),1)
                        )
                        ON CONFLICT (""roId"") DO NOTHING
                        RETURNING ""Id"";";

                    await using var insertStoryCmd = new NpgsqlCommand(insertStorySql, conn, transaction);
                    insertStoryCmd.Parameters.AddWithValue("RundownId", roId);
                    insertStoryCmd.Parameters.AddWithValue("roId", storyID);
                    insertStoryCmd.Parameters.AddWithValue("Identificador", Guid.NewGuid().ToString());
                    insertStoryCmd.Parameters.AddWithValue("Titulo", (object?)storySlug ?? DBNull.Value);

                    await insertStoryCmd.ExecuteNonQueryAsync();
                }
                else
                {
                    // Remove antigos créditos/tarjas antes de inserir
                    const string deleteStoriesCreditoSql = @"DELETE FROM ""MOS"".""StoryCreditos"" 
                        WHERE ""StoryId"" IN (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";
                    await using (var cmd = new NpgsqlCommand(deleteStoriesCreditoSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("roId", storyID);
                        await cmd.ExecuteNonQueryAsync();
                    }

                    const string deleteStoriesTarjaSql = @"DELETE FROM ""MOS"".""StoryTarjas"" 
                        WHERE ""StoryId"" IN (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";
                    await using (var cmd = new NpgsqlCommand(deleteStoriesTarjaSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("roId", storyID);
                        await cmd.ExecuteNonQueryAsync();
                    }

                    // Insere novos créditos e tarjas
                    const string insertCreditoSql = @"
                        INSERT INTO ""MOS"".""StoryCreditos"" 
                        (""StoryId"", ""Identificador"", ""Nome"", ""Cargo"", ""Ordem"")
                        VALUES (
                            (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1), 
                            @Identificador, @Nome, @Cargo, @Ordem
                        );";

                    const string insertTarjaSql = @"
                        INSERT INTO ""MOS"".""StoryTarjas"" 
                        (""StoryId"", ""Identificador"", ""Manchete"", ""Linha1"", ""Linha2"", ""Ordem"")
                        VALUES (
                            (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1), 
                            @Identificador, @Manchete, @Linha1, @Linha2, @Ordem
                        );";

                    await using var insertCreditoCmd = new NpgsqlCommand(insertCreditoSql, conn, transaction);
                    insertCreditoCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Nome", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Cargo", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

                    await using var insertTarjaCmd = new NpgsqlCommand(insertTarjaSql, conn, transaction);
                    insertTarjaCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertTarjaCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertTarjaCmd.Parameters.Add("Manchete", NpgsqlTypes.NpgsqlDbType.Text);
                    insertTarjaCmd.Parameters.Add("Linha1", NpgsqlTypes.NpgsqlDbType.Text);
                    insertTarjaCmd.Parameters.Add("Linha2", NpgsqlTypes.NpgsqlDbType.Text);
                    insertTarjaCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

                    var matches = Regex.Matches(conteudoCompleto, @"\[CG\s*:(.*?)\]");
                    int ordemC = 0;
                    int ordemT = 0;

                    foreach (Match match in matches)
                    {
                        string conteudo = match.Groups[1].Value;
                        var partes = conteudo.Split('\\');

                        if (partes[0] == "CREDITO_NEWS_VMIX_2025")
                        {
                            insertCreditoCmd.Parameters["roId"].Value = storyID;
                            insertCreditoCmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
                            insertCreditoCmd.Parameters["Nome"].Value = partes[1];
                            insertCreditoCmd.Parameters["Cargo"].Value = partes[2];
                            insertCreditoCmd.Parameters["Ordem"].Value = ordemC++;

                            await insertCreditoCmd.ExecuteNonQueryAsync();
                        }
                        if (partes[0] == "TARJA_NEWS_VMIX_2025")
                        {
                            insertTarjaCmd.Parameters["roId"].Value = storyID;
                            insertTarjaCmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
                            insertTarjaCmd.Parameters["Manchete"].Value = partes[1];
                            insertTarjaCmd.Parameters["Linha1"].Value = partes[2];
                            insertTarjaCmd.Parameters["Linha2"].Value = partes[3];
                            insertTarjaCmd.Parameters["Ordem"].Value = ordemT++;

                            await insertTarjaCmd.ExecuteNonQueryAsync();
                        }
                    }
                }

                // Agora retorna JSON (rundown + stories + creditos/tarjas)
                const string selectFinalJson_ = @"
                    SELECT json_build_object(
                        'rundown', row_to_json(r),
                        'stories', (
                            SELECT json_agg(
                                json_build_object(
                                    'Id', s.""Id"",
                                    'roId', s.""roId"",
                                    'Titulo', s.""Titulo"",
                                    'Creditos', (
                                        SELECT COALESCE(json_agg(c), '[]'::json)
                                        FROM ""MOS"".""StoryCreditos"" c
                                        WHERE c.""StoryId"" = s.""Id""
                                    ),
                                    'Tarjas', (
                                        SELECT COALESCE(json_agg(t), '[]'::json)
                                        FROM ""MOS"".""StoryTarjas"" t
                                        WHERE t.""StoryId"" = s.""Id""
                                    )
                                )
                            )
                            FROM ""MOS"".""Stories"" s
                            WHERE s.""RundownId"" = r.""Id""
                        )
                    )
                    FROM ""MOS"".""Rundowns"" r
                    WHERE r.""Identificador"" = @roId;";

                const string selectFinalJson = @"
                    SELECT json_build_object(
                        'rundown', row_to_json(r),
                        'stories', (
                            SELECT json_agg(
                                json_build_object(
                                    'Id', s.""Id"",
                                    'roId', s.""roId"",
                                    'Titulo', s.""Titulo"",
                                    'Creditos', (
                                        SELECT COALESCE(json_agg(DISTINCT jsonb_build_object(
                                            'Id', c.""Id"",
                                            'Identificador', c.""Identificador"",
                                            'Nome', c.""Nome"",
                                            'Cargo', c.""Cargo"",
                                            'Ordem', c.""Ordem""
                                        )), '[]'::json)
                                        FROM ""MOS"".""StoryCreditos"" c
                                        WHERE c.""StoryId"" = s.""Id""
                                    ),
                                    'Tarjas', (
                                        SELECT COALESCE(json_agg(DISTINCT jsonb_build_object(
                                            'Id', t.""Id"",
                                            'Identificador', t.""Identificador"",
                                            'Manchete', t.""Manchete"",
                                            'Linha1', t.""Linha1"",
                                            'Linha2', t.""Linha2"",
                                            'Ordem', t.""Ordem""
                                        )), '[]'::json)
                                        FROM ""MOS"".""StoryTarjas"" t
                                        WHERE t.""StoryId"" = s.""Id""
                                    )
                                )
                            )
                            FROM ""MOS"".""Stories"" s
                            WHERE s.""RundownId"" = r.""Id""
                        )
                    )
                    FROM ""MOS"".""Rundowns"" r
                    WHERE r.""Identificador"" = @roId;";


                await using var selectCmd = new NpgsqlCommand(selectFinalJson, conn, transaction);
                selectCmd.Parameters.AddWithValue("roId", roId);

                var finalJson = (string?)await selectCmd.ExecuteScalarAsync();

                await transaction.CommitAsync();
                return finalJson;
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task AddRoStorySend_(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            // Criar uma transação para garantir atomicidade
            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("storyID")?.Value ?? "";
                var storySlug = item.Element("storySlug")?.Value ?? "";
                var conteudoCompleto = item.Element("storyBody")?.Value ?? "";

                if (string.IsNullOrEmpty(conteudoCompleto))
                {
                    const string insertStorySql = @"INSERT INTO ""MOS"".""Stories"" (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
                VALUES ((SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1), @roId, @Identificador, @Titulo, 
                COALESCE((SELECT MAX(""Ordem"") + 1 FROM ""MOS"".""Stories"" WHERE ""RundownId"" = 
                (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)),1)) ON CONFLICT (""roId"") DO NOTHING RETURNING ""Id"";";

                    await using var insertStoryCmd = new NpgsqlCommand(insertStorySql, conn, transaction);
                    insertStoryCmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertStoryCmd.Parameters.Add("Titulo", NpgsqlTypes.NpgsqlDbType.Text);

                    insertStoryCmd.Parameters["RundownId"].Value = roId;
                    insertStoryCmd.Parameters["roId"].Value = storyID;
                    insertStoryCmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
                    insertStoryCmd.Parameters["Titulo"].Value = item.Element("storySlug")?.Value ?? (object)DBNull.Value;

                    await insertStoryCmd.ExecuteNonQueryAsync();
                }

                else
                {
                    #region Remove Creditos e Tarjas
                    const string deleteStoriesCreditoSql = @"DELETE FROM ""MOS"".""StoryCreditos"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";

                    await using (var cmd = new NpgsqlCommand(deleteStoriesCreditoSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("roId", storyID);
                        await cmd.ExecuteNonQueryAsync();
                    }

                    const string deleteStoriesTarjaSql = @"DELETE FROM ""MOS"".""StoryTarjas"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";

                    await using (var cmd = new NpgsqlCommand(deleteStoriesTarjaSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("roId", storyID);
                        await cmd.ExecuteNonQueryAsync();
                    }
                    #endregion

                    // creditos
                    const string insertUpdateCreditoSql = @"INSERT INTO ""MOS"".""StoryCreditos"" (""StoryId"", ""Identificador"", ""Nome"", ""Cargo"", ""Ordem"")
                VALUES ((SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1), @Identificador, @Nome, @Cargo, @Ordem)";
                    //ON CONFLICT (""Identificador"") DO UPDATE
                    //SET ""Nome"" = EXCLUDED.""Nome""; ""Cargo"" = EXCLUDED.""Cargo""; ""Cargo"" = EXCLUDED.""Ordem"";";

                    await using var insertCreditoCmd = new NpgsqlCommand(insertUpdateCreditoSql, conn, transaction);
                    insertCreditoCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Nome", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Cargo", NpgsqlTypes.NpgsqlDbType.Text);
                    insertCreditoCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

                    //tarjas
                    const string insertUpdateTarjaSql = @"INSERT INTO ""MOS"".""StoryTarjas"" (""StoryId"", ""Identificador"", ""Manchete"", ""Linha1"", ""Linha2"", ""Ordem"")
                VALUES ((SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1), @Identificador, @Manchete, @Linha1, @Linha2, @Ordem)";
                    //ON CONFLICT (""Identificador"") DO UPDATE
                    //SET ""Nome"" = EXCLUDED.""Nome""; ""Cargo"" = EXCLUDED.""Cargo""; ""Cargo"" = EXCLUDED.""Ordem"";";

                    await using var insertUpdateTarjaCmd = new NpgsqlCommand(insertUpdateTarjaSql, conn, transaction);
                    insertUpdateTarjaCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    insertUpdateTarjaCmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    insertUpdateTarjaCmd.Parameters.Add("Manchete", NpgsqlTypes.NpgsqlDbType.Text);
                    insertUpdateTarjaCmd.Parameters.Add("Linha1", NpgsqlTypes.NpgsqlDbType.Text);
                    insertUpdateTarjaCmd.Parameters.Add("Linha2", NpgsqlTypes.NpgsqlDbType.Text);
                    insertUpdateTarjaCmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);


                    var matches = Regex.Matches(conteudoCompleto, @"\[CG\s*:(.*?)\]");

                    int ordemC = 0;
                    int ordemT = 0;
                    foreach (Match match in matches)
                    {
                        string conteudo = match.Groups[1].Value;
                        var partes = conteudo.Split('\\');
                        if (partes[0] == "CREDITO_NEWS_VMIX_2025")
                        {
                            insertCreditoCmd.Parameters["roId"].Value = storyID;
                            insertCreditoCmd.Parameters["Identificador"].Value = storyID;
                            insertCreditoCmd.Parameters["Nome"].Value = partes[1];
                            insertCreditoCmd.Parameters["Cargo"].Value = partes[2];
                            insertCreditoCmd.Parameters["Ordem"].Value = ordemC++;

                            await insertCreditoCmd.ExecuteNonQueryAsync();
                        }
                        if (partes[0] == "TARJA_NEWS_VMIX_2025")
                        {
                            insertUpdateTarjaCmd.Parameters["roId"].Value = storyID;
                            insertUpdateTarjaCmd.Parameters["Identificador"].Value = storyID;
                            insertUpdateTarjaCmd.Parameters["Manchete"].Value = partes[1];
                            insertUpdateTarjaCmd.Parameters["Linha1"].Value = partes[2];
                            insertUpdateTarjaCmd.Parameters["Linha2"].Value = partes[3];
                            insertUpdateTarjaCmd.Parameters["Ordem"].Value = ordemT++;

                            await insertUpdateTarjaCmd.ExecuteNonQueryAsync();
                        }
                    }
                }

                await transaction.CommitAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task<string> UpdateOrdemroElementAction(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var tx = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyIdSource = item.Element("element_source")?.Element("storyID")?.Value ?? "";
                var storyIdTarget = item.Element("element_target")?.Element("storyID")?.Value ?? "";

                if (string.IsNullOrEmpty(roId) || string.IsNullOrEmpty(storyIdSource))
                    throw new Exception("roId ou storyIdSource inválidos.");

                int ordemSource;
                int ordemTarget;

                // 🔹 Se destino vier vazio → mover para o final
                if (string.IsNullOrEmpty(storyIdTarget))
                {
                    var getMaxSql = @"
                SELECT COALESCE(MAX(""Ordem""),0) + 1 
                FROM ""MOS"".""Stories"" 
                WHERE ""RundownId"" = (
                    SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1
                )";

                    await using (var cmd = new NpgsqlCommand(getMaxSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("roId", roId);
                        ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync());
                    }
                }
                else
                {
                    const string getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";

                    await using (var cmd = new NpgsqlCommand(getOrderSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("id", storyIdTarget);
                        ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
                    }
                }

                // 🔹 Sempre pega a ordem da origem
                const string getOrderSourceSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";
                await using (var cmd = new NpgsqlCommand(getOrderSourceSql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("id", storyIdSource);
                    ordemSource = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
                }

                // 🔹 Ajuste das ordens dos outros elementos
                if (ordemSource < ordemTarget)
                {
                    // Como o ENPS envia o destino como o story de referência,
                    // precisamos ajustar para que a source vá logo após o target
                    ordemTarget--;

                    const string updateSql = @"UPDATE ""MOS"".""Stories""
                        SET ""Ordem"" = ""Ordem"" - 1
                        WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)
                        AND ""Ordem"" > @ordemSource AND ""Ordem"" <= @ordemTarget";

                    await using (var cmd = new NpgsqlCommand(updateSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("roId", roId);
                        cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                        cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                        await cmd.ExecuteNonQueryAsync();
                    }
                }
                else if (ordemSource > ordemTarget)
                {
                    // Move para cima → incrementa quem está entre Target e Source
                    const string updateSql = @"  UPDATE ""MOS"".""Stories""
                        SET ""Ordem"" = ""Ordem"" + 1
                        WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)
                        AND ""Ordem"" >= @ordemTarget AND ""Ordem"" < @ordemSource";

                    await using (var cmd = new NpgsqlCommand(updateSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("roId", roId);
                        cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                        cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                        await cmd.ExecuteNonQueryAsync();
                    }
                }

                // 🔹 Atualiza a ordem da story movida
                const string updateSourceSql = @"UPDATE ""MOS"".""Stories"" SET ""Ordem"" = @ordem WHERE ""roId"" = @id";
                await using (var cmd = new NpgsqlCommand(updateSourceSql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("ordem", ordemTarget);
                    cmd.Parameters.AddWithValue("id", storyIdSource);
                    await cmd.ExecuteNonQueryAsync();
                }

                //await tx.CommitAsync();

                // Agora pega todos os stories afetados (no mesmo Rundown)
                var selectSql = @"
                    SELECT ""Id"", ""Ordem"", ""Titulo""
                    FROM ""MOS"".""Stories"" 
                    WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)
                    ORDER BY ""Ordem"";";

                var stories = new List<object>();

                await using (var cmd = new NpgsqlCommand(selectSql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("roId", roId);
                    await using var reader = await cmd.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        stories.Add(new
                        {
                            Id = reader.GetInt32(0),
                            Ordem = reader.GetInt32(1),
                            Titulo = reader.GetString(2),
                        });
                    }
                }

                await tx.CommitAsync();

                // Retorno JSON
                var json = System.Text.Json.JsonSerializer.Serialize(
                    new
                    {
                        command = "roElementMove",
                        Programa = roId,
                        Stories = stories
                    });

                return json;
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync();
                Console.WriteLine("Erro ao mover story: " + ex.Message);
                throw;
            }
        }

        public async Task<string> UpdateOrdemroElementAction__(XElement item)
        {
            var roId = item.Element("roID")?.Value ?? "";
            var storyIdTarget = item.Element("element_target")?.Element("storyID")?.Value ?? "";
            var storyIdSource = item.Element("element_source")?.Element("storyID")?.Value ?? "";

            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();
            await using var tx = await conn.BeginTransactionAsync();

            // Pega ordem do destino
            const string getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";

            int ordemTarget;
            int ordemSource;

            await using (var cmd = new NpgsqlCommand(getOrderSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("id", storyIdTarget);
                ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
            }

            await using (var cmd = new NpgsqlCommand(getOrderSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("id", storyIdSource);
                ordemSource = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
            }

            if (ordemSource == 0 || ordemTarget == 0)
            {
                return "{}"; // nada a fazer
            }

            // Movendo para cima
            if (ordemSource > ordemTarget)
            {
                var sql = @"UPDATE ""MOS"".""Stories"" 
                    SET ""Ordem"" = ""Ordem"" + 1 
                    WHERE ""Ordem"" >= @ordemTarget 
                      AND ""Ordem"" < @ordemSource 
                      AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)";

                await using (var cmd = new NpgsqlCommand(sql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                    cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                    cmd.Parameters.AddWithValue("roId", roId);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            // Movendo para baixo
            else if (ordemSource < ordemTarget)
            {
                var sql = @"UPDATE ""MOS"".""Stories"" 
                    SET ""Ordem"" = ""Ordem"" - 1
                    WHERE ""Ordem"" <= @ordemTarget
                      AND ""Ordem"" > @ordemSource
                      AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)";

                await using (var cmd = new NpgsqlCommand(sql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                    cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                    cmd.Parameters.AddWithValue("roId", roId);
                    await cmd.ExecuteNonQueryAsync();
                }
            }

            // Atualiza a story movida
            var updateSql = @"UPDATE ""MOS"".""Stories"" SET ""Ordem"" = @ordem WHERE ""roId"" = @storyID";
            await using (var cmd = new NpgsqlCommand(updateSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("ordem", ordemTarget);
                cmd.Parameters.AddWithValue("storyID", storyIdSource);
                await cmd.ExecuteNonQueryAsync();
            }

            // Agora pega todos os stories afetados (no mesmo Rundown)
            var selectSql = @"
        SELECT ""Id"", ""Ordem"", ""Titulo""
        FROM ""MOS"".""Stories"" 
        WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)
        ORDER BY ""Ordem"";";

            var stories = new List<object>();

            await using (var cmd = new NpgsqlCommand(selectSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("roId", roId);
                await using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    stories.Add(new
                    {
                        Id = reader.GetInt32(0),
                        Ordem = reader.GetInt32(1),
                        Titulo = reader.GetString(2),
                    });
                }
            }

            await tx.CommitAsync();

            // Retorno JSON
            var json = System.Text.Json.JsonSerializer.Serialize(
                new
                {
                    command = "roElementMove",
                    Programa = roId,
                    Stories = stories
                });

            return json;
        }

        public async Task UpdateOrdemroElementAction_(XElement item)
        {
            var roId = item.Element("roID")?.Value ?? "";
            var storyIdTarget = item.Element("element_target")?.Element("storyID")?.Value ?? "";
            var storyIdSource = item.Element("element_source")?.Element("storyID")?.Value ?? "";

            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();
            await using var tx = await conn.BeginTransactionAsync();

            var getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""StoryId"" = @id AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)";

            getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";

            int ordemTarget;
            int ordemSource;

            // Pega ordem do destino
            await using (var cmd = new NpgsqlCommand(getOrderSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("id", storyIdTarget);
                //cmd.Parameters.AddWithValue("roId", roId);
                ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
            }

            // Pega ordem da origem
            await using (var cmd = new NpgsqlCommand(getOrderSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("id", storyIdSource);
                ordemSource = Convert.ToInt32(await cmd.ExecuteScalarAsync() ?? 0);
            }

            if (ordemSource == 0 || ordemTarget == 0)
            {
                return;
            }

            // Movendo para cima
            if (ordemSource > ordemTarget)
            {
                var sql = @"UPDATE ""MOS"".""Stories"" SET ""Ordem"" = ""Ordem"" + 1 WHERE ""Ordem"" >= @ordemTarget AND ""Ordem"" < @ordemSource AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)";

                await using (var cmd = new NpgsqlCommand(sql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                    cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                    cmd.Parameters.AddWithValue("roId", roId);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            // Movendo para baixo
            else if (ordemSource < ordemTarget)
            {
                var sql = @"UPDATE ""MOS"".""Stories"" 
                    SET ""Ordem"" = ""Ordem"" - 1
                    WHERE ""Ordem"" <= @ordemTarget
                      AND ""Ordem"" > @ordemSource
                      AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @roId LIMIT 1)";

                await using (var cmd = new NpgsqlCommand(sql, conn, tx))
                {
                    cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                    cmd.Parameters.AddWithValue("ordemSource", ordemSource);
                    cmd.Parameters.AddWithValue("roId", roId);
                    await cmd.ExecuteNonQueryAsync();
                }
            }

            var updateSql = @"UPDATE ""MOS"".""Stories"" SET ""Ordem"" = @ordem WHERE ""roId"" = @storyID";
            await using (var cmd = new NpgsqlCommand(updateSql, conn, tx))
            {
                cmd.Parameters.AddWithValue("ordem", ordemTarget);
                cmd.Parameters.AddWithValue("storyID", storyIdSource);
                var _ = await cmd.ExecuteNonQueryAsync();
                //Console.WriteLine(_);
            }

            await tx.CommitAsync();
            //Console.WriteLine($"✅ Story {storyIdSource} movido para posição {ordemTarget}");
        }

        public async Task InsertroElementAction_(XElement item)
        {
            //return;
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            // Criar uma transação para garantir atomicidade
            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";

                var storyID = item.Element("element_source").Element("story").Element("storyID")?.Value ?? "";
                var storySlug = item.Element("element_source").Element("story").Element("storySlug")?.Value ?? "";
                var storyIDOrdem = item.Element("element_target").Element("storyID")?.Value ?? "";
                int ordemTarget = 1;

                // inserir ocupando a posicao do anterior
                var insertStorySql = @"INSERT INTO ""MOS"".""Stories"" (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
                VALUES ((SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1), @roId, @Identificador, @Titulo, @Ordem) 
                ON CONFLICT (""roId"") DO NOTHING RETURNING ""Id"";";

                if (string.IsNullOrEmpty(storyIDOrdem))
                {
                    insertStorySql = @"INSERT INTO ""MOS"".""Stories"" (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"") 
                VALUES ((SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1), @roId, @Identificador, @Titulo, 
                COALESCE((SELECT MAX(""Ordem"") + 1 FROM ""MOS"".""Stories"" WHERE ""RundownId"" = 
                (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)),1)) ON CONFLICT (""roId"") DO NOTHING RETURNING ""Id"";";
                }
                else
                {
                    var getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";

                    await using (var cmd = new NpgsqlCommand(getOrderSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("id", storyIDOrdem);
                        ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync());
                    }

                    const string updateOrdemAllsql = @"update ""MOS"".""Stories"" set ""Ordem"" = ""Ordem"" + 1 where ""Ordem"" >= @ordemTarget
                and ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)";
                    await using (var cmd = new NpgsqlCommand(updateOrdemAllsql, conn, transaction))
                    {
                        cmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Text);
                        cmd.Parameters["RundownId"].Value = roId;
                        cmd.Parameters.Add("ordemTarget", NpgsqlTypes.NpgsqlDbType.Integer);
                        cmd.Parameters["ordemTarget"].Value = ordemTarget;

                        var _ = await cmd.ExecuteNonQueryAsync();
                        //Console.WriteLine("atualizados: " + _);
                    }
                }

                await using (var cmd = new NpgsqlCommand(insertStorySql, conn, transaction))
                {
                    cmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Text);
                    cmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    //insertStoryCmd.Parameters.Add("id", NpgsqlTypes.NpgsqlDbType.Text);
                    cmd.Parameters.Add("Identificador", NpgsqlTypes.NpgsqlDbType.Text);
                    cmd.Parameters.Add("Titulo", NpgsqlTypes.NpgsqlDbType.Text);
                    cmd.Parameters.Add("Ordem", NpgsqlTypes.NpgsqlDbType.Integer);

                    cmd.Parameters["RundownId"].Value = roId;
                    cmd.Parameters["roId"].Value = storyID;
                    //insertStoryCmd.Parameters["id"].Value = storyIDOrdem;
                    cmd.Parameters["Identificador"].Value = Guid.NewGuid().ToString();
                    cmd.Parameters["Titulo"].Value = storySlug;
                    cmd.Parameters["Ordem"].Value = ordemTarget;

                    var __ = await cmd.ExecuteNonQueryAsync();
                    //Console.WriteLine("adicionado: " + __);
                }

                if (!string.IsNullOrEmpty(storyIDOrdem))
                {
                    //return;
                    //const string updateOrdemAllsql = @"update ""MOS"".""Stories"" set ""Ordem"" = ""Ordem"" + 1 where ""Ordem"" >= (SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id)
                    //and ""roId"" <> @roId and ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)";
                    //await using var updateOrdemAllCmd = new NpgsqlCommand(updateOrdemAllsql, conn, transaction);
                    //updateOrdemAllCmd.Parameters.Add("RundownId", NpgsqlTypes.NpgsqlDbType.Text);
                    //updateOrdemAllCmd.Parameters["RundownId"].Value = roId;
                    //updateOrdemAllCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                    //updateOrdemAllCmd.Parameters["roId"].Value = storyID;
                    //updateOrdemAllCmd.Parameters.Add("id", NpgsqlTypes.NpgsqlDbType.Text);
                    //updateOrdemAllCmd.Parameters["id"].Value = storyIDOrdem;

                    //var _ = await updateOrdemAllCmd.ExecuteNonQueryAsync();
                    //Console.WriteLine(_);
                }

                await transaction.CommitAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine("sql error: " + ex.Message.ToString());
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task<string> InsertroElementAction(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("element_source")?.Element("story")?.Element("storyID")?.Value ?? "";
                var storySlug = item.Element("element_source")?.Element("story")?.Element("storySlug")?.Value ?? "";
                var storyIDOrdem = item.Element("element_target")?.Element("storyID")?.Value ?? "";

                int ordemTarget = 1;

                // Se foi passada uma story de referência, calcula a ordem alvo e abre espaço
                if (!string.IsNullOrEmpty(storyIDOrdem))
                {
                    const string getOrderSql = @"SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @id";
                    await using (var cmd = new NpgsqlCommand(getOrderSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("id", storyIDOrdem);
                        ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync());
                    }

                    const string bumpSql = @"
                        UPDATE ""MOS"".""Stories""
                        SET ""Ordem"" = ""Ordem"" + 1
                        WHERE ""Ordem"" >= @ordemTarget
                          AND ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)";
                    await using (var cmd = new NpgsqlCommand(bumpSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("RundownId", roId);
                        cmd.Parameters.AddWithValue("ordemTarget", ordemTarget);
                        await cmd.ExecuteNonQueryAsync();
                    }
                }
                else
                {
                    // se não foi passada referência, coloca no final (MAX(Ordem)+1)
                    const string maxOrderSql = @"
                        SELECT COALESCE(
                            (SELECT MAX(""Ordem"") + 1
                             FROM ""MOS"".""Stories""
                             WHERE ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)
                        ), 1)";
                    await using (var cmd = new NpgsqlCommand(maxOrderSql, conn, transaction))
                    {
                        cmd.Parameters.AddWithValue("RundownId", roId);
                        ordemTarget = Convert.ToInt32(await cmd.ExecuteScalarAsync());
                    }
                }

                // Tenta inserir
                const string insertSql = @"
                    INSERT INTO ""MOS"".""Stories""
                        (""RundownId"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"")
                    VALUES (
                        (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1),
                        @roId,
                        @Identificador,
                        @Titulo,
                        @Ordem
                    )
                    ON CONFLICT (""roId"") DO NOTHING
                    RETURNING ""Id"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"";";

                object storyObj = null;

                await using (var cmd = new NpgsqlCommand(insertSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("RundownId", roId);
                    cmd.Parameters.AddWithValue("roId", storyID);
                    cmd.Parameters.AddWithValue("Identificador", Guid.NewGuid().ToString());
                    cmd.Parameters.AddWithValue("Titulo", (object?)storySlug ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("Ordem", ordemTarget);

                    await using var reader = await cmd.ExecuteReaderAsync();
                    if (await reader.ReadAsync())
                    {
                        storyObj = new
                        {
                            Id = reader.GetInt32(0),
                            RoId = reader.GetString(1),
                            Identificador = reader.GetString(2),
                            Titulo = reader.IsDBNull(3) ? null : reader.GetString(3),
                            Ordem = reader.GetInt32(4)
                        };
                    }
                }

                // Se não retornou (por conflito), busca a existente
                if (storyObj == null)
                {
                    const string fetchSql = @"
                SELECT s.""Id"", s.""roId"", s.""Identificador"", s.""Titulo"", s.""Ordem""
                FROM ""MOS"".""Stories"" s
                WHERE s.""roId"" = @roId
                  AND s.""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1) 
                ORDER BY s.""Id"" DESC 
                LIMIT 1;";
                    await using var fetch = new NpgsqlCommand(fetchSql, conn, transaction);
                    fetch.Parameters.AddWithValue("roId", storyID);
                    fetch.Parameters.AddWithValue("RundownId", roId);

                    await using var r = await fetch.ExecuteReaderAsync();
                    if (await r.ReadAsync())
                    {
                        storyObj = new
                        {
                            Id = r.GetInt32(0),
                            RoId = r.GetString(1),
                            Identificador = r.GetString(2),
                            Titulo = r.IsDBNull(3) ? null : r.GetString(3),
                            Ordem = r.GetInt32(4)
                        };
                    }
                    else
                    {
                        // fallback para objeto vazio se realmente não existir
                        storyObj = new { };
                    }
                }

                await transaction.CommitAsync();

                // Use nome totalmente qualificado para evitar conflito entre Newtonsoft e System.Text.Json
                var json = System.Text.Json.JsonSerializer.Serialize(
                    new
                    {
                        command = "roElementAction",
                        Programa = roId,
                        Story = storyObj
                    },
                    new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = false, // mude para true se quiser legível no log
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
                    }
                );

                return json;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                Console.WriteLine("sql error: " + ex.Message);
                throw;
            }
        }

        public async Task<string> UpdateStorySlugroElementAction__(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("element_source")?.Element("story")?.Element("storyID")?.Value ?? "";
                var storySlug = item.Element("element_source")?.Element("story")?.Element("storySlug")?.Value ?? "";

                // Atualiza o título
                const string updateSql = @"
                    UPDATE ""MOS"".""Stories"" 
                    SET ""Titulo"" = @Titulo 
                    WHERE ""roId"" = @roId
                    RETURNING ""Id"", ""roId"", ""Identificador"", ""Titulo"", ""Ordem"";";

                object storyObj = null;

                await using (var cmd = new NpgsqlCommand(updateSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    cmd.Parameters.AddWithValue("Titulo", (object?)storySlug ?? DBNull.Value);

                    await using var reader = await cmd.ExecuteReaderAsync();
                    if (await reader.ReadAsync())
                    {
                        storyObj = new
                        {
                            Id = reader.GetInt32(0),
                            RoId = reader.GetString(1),
                            Identificador = reader.GetString(2),
                            Titulo = reader.IsDBNull(3) ? null : reader.GetString(3),
                            Ordem = reader.GetInt32(4)
                        };
                    }
                }

                await transaction.CommitAsync();

                // Retorno JSON no mesmo padrão
                var json = System.Text.Json.JsonSerializer.Serialize(
                    new
                    {
                        command = "roElementUpdateSlug",
                        Programa = roId,
                        Story = storyObj ?? new { }
                    },
                    new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = false,
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
                    }
                );

                return json;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                Console.WriteLine("sql error: " + ex.Message);
                throw;
            }
        }

        public async Task<string> UpdateStorySlugroElementAction(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("element_source")?.Element("story")?.Element("storyID")?.Value ?? "";
                var storySlug = item.Element("element_source")?.Element("story")?.Element("storySlug")?.Value ?? "";

                object storyObj = null;
                int? idPrograma = null;

                const string updateSql = @"
                    UPDATE ""MOS"".""Stories"" 
                    SET ""Titulo"" = @Titulo 
                    WHERE ""roId"" = @roId
                    RETURNING ""Id"", ""roId"", ""RundownId"", ""Titulo"", ""Ordem"";";

                int? rundownId = null;

                await using (var cmd = new NpgsqlCommand(updateSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    cmd.Parameters.AddWithValue("Titulo", (object?)storySlug ?? DBNull.Value);

                    await using var reader = await cmd.ExecuteReaderAsync();
                    if (await reader.ReadAsync())
                    {
                        var id = reader.GetInt32(0);
                        var roIdReturned = reader.GetString(1);
                        rundownId = reader.GetInt32(2);

                        storyObj = new
                        {
                            Id = id,
                            RoId = roIdReturned,
                            Titulo = reader.IsDBNull(3) ? null : reader.GetString(3),
                            Ordem = reader.GetInt32(4)
                        };
                    }
                }

                if (rundownId.HasValue)
                {
                    const string progSql = @"SELECT ""Programa"" FROM ""MOS"".""Rundowns"" WHERE ""Id"" = @Id LIMIT 1;";
                    await using var cmdProg = new NpgsqlCommand(progSql, conn, transaction);
                    cmdProg.Parameters.AddWithValue("Id", rundownId.Value);

                    var result = await cmdProg.ExecuteScalarAsync();
                    if (result != null && result != DBNull.Value)
                        idPrograma = Convert.ToInt32(result);
                }

                await transaction.CommitAsync();

                var json = System.Text.Json.JsonSerializer.Serialize(
                    new
                    {
                        command = "roElementUpdateSlug",
                        Programa = idPrograma,
                        Story = storyObj ?? new { }
                    },
                    new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = false,
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
                    }
                );

                return json;
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                Console.WriteLine("sql error: " + ex.Message);
                throw;
            }
        }

        public async Task UpdateStorySlugroElementAction_(XElement item)
        {
            //return;
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            // Criar uma transação para garantir atomicidade
            await using var transaction = await conn.BeginTransactionAsync();

            try
            {
                var roId = item.Element("roID")?.Value ?? "";
                var storyID = item.Element("element_source").Element("story").Element("storyID")?.Value ?? "";
                var storySlug = item.Element("element_source").Element("story").Element("storySlug")?.Value ?? "";
                const string insertStorySql = @"update ""MOS"".""Stories"" set ""Titulo"" = @Titulo where ""roId"" = @roId;";

                await using var insertStoryCmd = new NpgsqlCommand(insertStorySql, conn, transaction);
                insertStoryCmd.Parameters.Add("roId", NpgsqlTypes.NpgsqlDbType.Text);
                insertStoryCmd.Parameters.Add("Titulo", NpgsqlTypes.NpgsqlDbType.Text);

                insertStoryCmd.Parameters["roId"].Value = storyID;
                insertStoryCmd.Parameters["Titulo"].Value = storySlug;

                await insertStoryCmd.ExecuteNonQueryAsync();

                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task<string> DeleteroElementAction(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();
            try
            {
                var storyID = item.Element("element_source")?.Element("storyID")?.Value ?? "";
                var roID = item.Element("roID")?.Value ?? "";

                if (string.IsNullOrEmpty(roID) && !string.IsNullOrEmpty(storyID) && storyID.Contains(";"))
                    roID = storyID.Substring(0, storyID.LastIndexOf(';'));

                // 🔹 1. Descobre ordem e RundownId da story que será removida
                int ordemRemovida = 0;
                int rundownDbId = 0;
                const string getInfoSql = @"
            SELECT s.""Ordem"", s.""RundownId""
            FROM ""MOS"".""Stories"" s
            WHERE s.""roId"" = @roId
            LIMIT 1";
                await using (var cmd = new NpgsqlCommand(getInfoSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    await using var reader = await cmd.ExecuteReaderAsync();
                    if (await reader.ReadAsync())
                    {
                        ordemRemovida = reader.GetInt32(0);
                        rundownDbId = reader.GetInt32(1);
                    }
                }

                // 🔹 2. Deleta dependências (créditos / tarjas)
                const string deleteStoriesCreditoSql = @"DELETE FROM ""MOS"".""StoryCreditos"" WHERE ""StoryId"" IN
                                                 (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";
                await using (var cmd = new NpgsqlCommand(deleteStoriesCreditoSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string deleteStoriesTarjaSql = @"DELETE FROM ""MOS"".""StoryTarjas"" WHERE ""StoryId"" IN
                                               (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";
                await using (var cmd = new NpgsqlCommand(deleteStoriesTarjaSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    await cmd.ExecuteNonQueryAsync();
                }

                // 🔹 3. Deleta a story e pega o Id interno
                const string deleteStoriesSql = @"DELETE FROM ""MOS"".""Stories"" 
                                          WHERE ""roId"" = @roId
                                          RETURNING ""Id"";";
                int? storyDbId = null;
                await using (var cmd = new NpgsqlCommand(deleteStoriesSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    var result = await cmd.ExecuteScalarAsync();
                    if (result != null && result != DBNull.Value)
                        storyDbId = Convert.ToInt32(result);
                }

                // 🔹 4. Reorganiza as ordens dos que estavam depois
                const string updateOrdemAllsql = @"
            UPDATE ""MOS"".""Stories"" 
            SET ""Ordem"" = ""Ordem"" - 1
            WHERE ""RundownId"" = @RundownId
              AND ""Ordem"" > @ordemRemovida";
                await using (var cmd = new NpgsqlCommand(updateOrdemAllsql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("RundownId", rundownDbId);
                    cmd.Parameters.AddWithValue("ordemRemovida", ordemRemovida);
                    await cmd.ExecuteNonQueryAsync();
                }

                await transaction.CommitAsync();

                return System.Text.Json.JsonSerializer.Serialize(new
                {
                    command = "roDelete",
                    Programa = roID,
                    Story = new
                    {
                        Id = storyDbId,   // PK interno
                        StoryId = storyID, // roId original
                        status = "deleted"
                    }
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return System.Text.Json.JsonSerializer.Serialize(new
                {
                    command = "roDelete",
                    Programa = item.Element("roID")?.Value ?? "",
                    status = "error",
                    message = ex.Message
                });
            }
        }

        public async Task DeleteroElementAction_(XElement item)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();
            try
            {
                var storyID = item.Element("element_source").Element("storyID").Value ?? "";
                var roID = item.Element("roID").Value ?? "";
                if (string.IsNullOrEmpty(roID))
                    roID = storyID.Substring(0, storyID.LastIndexOf(';'));

                const string deleteStoriesCreditoSql = @"DELETE FROM ""MOS"".""StoryCreditos"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";

                await using (var cmd = new NpgsqlCommand(deleteStoriesCreditoSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roId", storyID);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string deleteStoriesTarjaSql = @"DELETE FROM ""MOS"".""StoryTarjas"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId LIMIT 1);";

                await using (var cmd = new NpgsqlCommand(deleteStoriesTarjaSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roID", storyID);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string updateOrdemAllsql = @"update ""MOS"".""Stories"" set ""Ordem"" = ""Ordem"" - 1 where ""Ordem"" >= (SELECT ""Ordem"" FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId)
                    and ""RundownId"" = (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @RundownId LIMIT 1)";
                await using (var cmd = new NpgsqlCommand(updateOrdemAllsql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("RundownId", roID);
                    cmd.Parameters.AddWithValue("roId", storyID);

                    var x = await cmd.ExecuteNonQueryAsync();
                }

                const string deleteStoriesSql = @"DELETE FROM ""MOS"".""Stories"" WHERE ""roId"" = @roId;";

                await using (var cmd = new NpgsqlCommand(deleteStoriesSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("roID", storyID);
                    await cmd.ExecuteNonQueryAsync();
                }

                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        public async Task RemoveRoDelete(string identificador)
        {
            await using var conn = new NpgsqlConnection(cnPG);
            await conn.OpenAsync();

            await using var transaction = await conn.BeginTransactionAsync();
            try
            {
                const string deleteStoriesCreditoSql = @"DELETE FROM ""MOS"".""StoryCreditos"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""RundownId"" = 
                (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @Identificador LIMIT 1));";

                await using (var cmd = new NpgsqlCommand(deleteStoriesCreditoSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("Identificador", identificador);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string deleteStoriesTarjaSql = @"DELETE FROM ""MOS"".""StoryTarjas"" WHERE ""StoryId"" IN
                (SELECT ""Id"" FROM ""MOS"".""Stories"" WHERE ""RundownId"" = 
                (SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @Identificador LIMIT 1));";

                await using (var cmd = new NpgsqlCommand(deleteStoriesTarjaSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("Identificador", identificador);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string deleteStoriesSql = @"DELETE FROM ""MOS"".""Stories"" WHERE ""RundownId"" = (
                SELECT ""Id"" FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @Identificador LIMIT 1);";

                await using (var cmd = new NpgsqlCommand(deleteStoriesSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("Identificador", identificador);
                    await cmd.ExecuteNonQueryAsync();
                }

                const string deleteRundownSql = @"DELETE FROM ""MOS"".""Rundowns"" WHERE ""Identificador"" = @Identificador;";

                await using (var cmd = new NpgsqlCommand(deleteRundownSql, conn, transaction))
                {
                    cmd.Parameters.AddWithValue("Identificador", identificador);
                    await cmd.ExecuteNonQueryAsync();
                }

                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        //public Models.Crawl getLast(string Tipo)
        //{
        //    Connect();
        //    using var cmd = new NpgsqlCommand("select \"Id\", \"Identificador\", \"Tipo\", \"Titulo\", \"DataHora\", \"DataHoraAtualizacao\", \"Status\", \"Content\" "
        //        + "from \"Crawl\".\"Logs\" where \"Tipo\" = $1 order by \"Id\" Desc Limit 1", conn)
        //    { Parameters = { new() { Value = Tipo } } };

        //    using var reader = cmd.ExecuteReader();

        //    Models.Crawl log = null;

        //    if (reader != null)
        //    {
        //        log = new Models.Crawl();
        //        while (reader.Read())
        //        {
        //            log.Id = reader.GetInt32(0);
        //            log.Identificador = reader.GetInt32(1);
        //            log.Tipo = reader.GetString(2);
        //            log.Titulo = reader.GetString(3);
        //            log.DataHora = reader.GetDateTime(4);
        //            log.DataHoraAtualizacao = reader.GetDateTime(5);
        //            log.Status = reader.GetString(6);
        //            log.Content = reader.GetString(7);
        //        }
        //        Disconnect();
        //        return log;
        //    }

        //    Disconnect();
        //    return log;
        //}
    }

}
