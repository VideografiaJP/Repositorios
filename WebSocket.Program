using System;
using System.Diagnostics;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;

namespace JovemPan.WebSocket.Agent
{
    internal static class Program
    {
        private static NotifyIcon notifyIcon;
        private static MainForm? mainForm;

        [STAThread]
        static void Main(string[] args)
        {
            ApplicationConfiguration.Initialize();

            notifyIcon = new NotifyIcon
            {
                Icon = new System.Drawing.Icon("server_icon.ico"), // seu .ico
                Visible = true,
                Text = "vMix Jovem Pan WebSocket"
            };

            // Criar menu do botão direito
            var contextMenu = new ContextMenuStrip();
            contextMenu.Items.Add("Abrir", null, (s, e) =>
            {
                if (mainForm == null || mainForm.IsDisposed)
                    mainForm = new MainForm();

                mainForm.Show();
                mainForm.BringToFront();
            });
            contextMenu.Items.Add("Sair", null, (s, e) =>
            {
                notifyIcon.Visible = false;
                Application.Exit();
            });

            notifyIcon.ContextMenuStrip = contextMenu;

            // Inicia o servidor em segundo plano
            _ = Task.Run(() => StartWebServer(args));

            Application.Run();
        }

        static void StartWebServer(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);
            builder.WebHost.UseUrls("http://0.0.0.0:5000");

            var app = builder.Build();
            app.UseWebSockets();

            var vMixProcess_ = builder.Configuration["appSettings:vMixProcess"];
            var vMixFileName_ = builder.Configuration["appSettings:vMixFileName"];
            var vMixPath = builder.Configuration["appSettings:vMixPath"];

            app.Map("/ws", async context =>
            {
                if (context.WebSockets.IsWebSocketRequest)
                {
                    using var webSocket = await context.WebSockets.AcceptWebSocketAsync();
                    Log("Cliente conectado");

                    var buffer = new byte[1024 * 4];

                    while (true)
                    {
                        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);

                        if (result.MessageType == WebSocketMessageType.Close)
                        {
                            Log("Cliente desconectado");
                            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Conexão encerrada", CancellationToken.None);
                            break;
                        }

                        var jsonString = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        Log($"JSON recebido: {jsonString}");

                        try
                        {
                            var command = JsonSerializer.Deserialize<CommandMessage>(jsonString);

                            if (command != null && command.Command == "openProgram")
                            {
                                var processos = Process.GetProcessesByName(command.Program);
                                foreach (var proc in processos)
                                {
                                    proc.Kill(true);
                                    proc.WaitForExit();
                                    Log($"Processo {proc.Id} encerrado.");
                                }

                                Process.Start(new ProcessStartInfo
                                {
                                    //FileName = command.Program,
                                    //UseShellExecute = true
                                    WorkingDirectory = vMixPath,
                                    FileName = vMixFileName_,
                                    UseShellExecute = true

                                });

                                Log($"{command.Program} aberto com sucesso.");
                            }
                        }
                        catch (Exception ex)
                        {
                            Log("Erro ao processar JSON: " + ex.Message);
                        }
                    }
                }
                else
                {
                    context.Response.StatusCode = 400;
                }
            });

            app.Run();
        }

        static void Log(string msg)
        {
            Debug.WriteLine(msg);
            if (mainForm != null && !mainForm.IsDisposed)
            {
                mainForm.Invoke(new Action(() =>
                {
                    mainForm.AddLog(msg);
                }));
            }
        }

        record CommandMessage(string Command, string Program);
    }
}
